//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated. To update the generation of this file, modify and re-run Unity.Mathematics.CodeGen.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using NUnit.Framework;
using Unity.Collections;
using Unity.Collections.LowLevel.Unsafe;
using Unity.PerformanceTesting;
using Unity.Mathematics.Geometry;
using Unity.Burst;

namespace Unity.Mathematics.PerformanceTests
{
    partial class TestMul
    {
        [BurstCompile(CompileSynchronously = true)]
        public unsafe class float4x4_float4x4
        {
            public const int iterations = 10000;

            public struct Arguments : IDisposable
            {
                public Random rng;
                public float4x4* m1;
                public float4x4* m2;

                public void Init()
                {
                    rng = new Random(1);
                    m1 = (float4x4*)UnsafeUtility.Malloc(UnsafeUtility.SizeOf<float4x4>() * iterations, UnsafeUtility.AlignOf<float4x4>(), Allocator.Persistent);
                    for (int i = 0; i < iterations; ++i)
                    {
                        m1[i] = float4x4.identity;
                    }

                    m2 = (float4x4*)UnsafeUtility.Malloc(UnsafeUtility.SizeOf<float4x4>() * iterations, UnsafeUtility.AlignOf<float4x4>(), Allocator.Persistent);
                    for (int i = 0; i < iterations; ++i)
                    {
                        m2[i] = float4x4.identity;
                    }

                }

                public void Dispose()
                {
                    UnsafeUtility.Free(m1, Allocator.Persistent);
                    UnsafeUtility.Free(m2, Allocator.Persistent);
                }
            }

            public static void CommonTestFunction(ref Arguments args)
            {
                for (int i = 0; i < iterations; ++i)
                {
                    args.m1[i] = math.mul(args.m1[i], args.m2[i]);
                }
            }

            public static void MonoTestFunction(ref Arguments args)
            {
                CommonTestFunction(ref args);
            }

            [BurstCompile(CompileSynchronously = true)]
            public static void BurstTestFunction(ref Arguments args)
            {
                CommonTestFunction(ref args);
            }

            public delegate void TestFunction(ref Arguments args);
        }

        [Test, Performance]
        public void float4x4_float4x4_mono()
        {
            float4x4_float4x4.TestFunction testFunction = float4x4_float4x4.MonoTestFunction;
            var args = new float4x4_float4x4.Arguments();
            args.Init();

            var monoSampleGroup = new SampleGroup("Mono", SampleUnit.Microsecond);            Measure.Method(() =>
            {
                testFunction.Invoke(ref args);
            })
            .SampleGroup(monoSampleGroup)
            .WarmupCount(1)
            .MeasurementCount(10)
            .Run();
            args.Dispose();
        }

        [Test, Performance]
        public void float4x4_float4x4_burst()
        {
            FunctionPointer<float4x4_float4x4.TestFunction> testFunction = BurstCompiler.CompileFunctionPointer<float4x4_float4x4.TestFunction>(float4x4_float4x4.BurstTestFunction);
            var args = new float4x4_float4x4.Arguments();
            args.Init();

            var burstSampleGroup = new SampleGroup("Burst", SampleUnit.Microsecond);            Measure.Method(() =>
            {
                testFunction.Invoke(ref args);
            })
            .SampleGroup(burstSampleGroup)
            .WarmupCount(1)
            .MeasurementCount(10)
            .Run();
            args.Dispose();
        }
        [BurstCompile(CompileSynchronously = true)]
        public unsafe class float4x4_float4
        {
            public const int iterations = 10000;

            public struct Arguments : IDisposable
            {
                public Random rng;
                public float4x4* m1;
                public float4* m2;

                public void Init()
                {
                    rng = new Random(1);
                    m1 = (float4x4*)UnsafeUtility.Malloc(UnsafeUtility.SizeOf<float4x4>() * iterations, UnsafeUtility.AlignOf<float4x4>(), Allocator.Persistent);
                    for (int i = 0; i < iterations; ++i)
                    {
                        m1[i] = float4x4.identity;
                    }

                    m2 = (float4*)UnsafeUtility.Malloc(UnsafeUtility.SizeOf<float4>() * iterations, UnsafeUtility.AlignOf<float4>(), Allocator.Persistent);
                    for (int i = 0; i < iterations; ++i)
                    {
                        m2[i] = new float4(1.0f, 0.0f, 0.0f, 1.0f);
                    }

                }

                public void Dispose()
                {
                    UnsafeUtility.Free(m1, Allocator.Persistent);
                    UnsafeUtility.Free(m2, Allocator.Persistent);
                }
            }

            public static void CommonTestFunction(ref Arguments args)
            {
                for (int i = 0; i < iterations; ++i)
                {
                    args.m2[i] = math.mul(args.m1[i], args.m2[i]);
                }
            }

            public static void MonoTestFunction(ref Arguments args)
            {
                CommonTestFunction(ref args);
            }

            [BurstCompile(CompileSynchronously = true)]
            public static void BurstTestFunction(ref Arguments args)
            {
                CommonTestFunction(ref args);
            }

            public delegate void TestFunction(ref Arguments args);
        }

        [Test, Performance]
        public void float4x4_float4_mono()
        {
            float4x4_float4.TestFunction testFunction = float4x4_float4.MonoTestFunction;
            var args = new float4x4_float4.Arguments();
            args.Init();

            var monoSampleGroup = new SampleGroup("Mono", SampleUnit.Microsecond);            Measure.Method(() =>
            {
                testFunction.Invoke(ref args);
            })
            .SampleGroup(monoSampleGroup)
            .WarmupCount(1)
            .MeasurementCount(10)
            .Run();
            args.Dispose();
        }

        [Test, Performance]
        public void float4x4_float4_burst()
        {
            FunctionPointer<float4x4_float4.TestFunction> testFunction = BurstCompiler.CompileFunctionPointer<float4x4_float4.TestFunction>(float4x4_float4.BurstTestFunction);
            var args = new float4x4_float4.Arguments();
            args.Init();

            var burstSampleGroup = new SampleGroup("Burst", SampleUnit.Microsecond);            Measure.Method(() =>
            {
                testFunction.Invoke(ref args);
            })
            .SampleGroup(burstSampleGroup)
            .WarmupCount(1)
            .MeasurementCount(10)
            .Run();
            args.Dispose();
        }
        [BurstCompile(CompileSynchronously = true)]
        public unsafe class quaternion_quaternion
        {
            public const int iterations = 10000;

            public struct Arguments : IDisposable
            {
                public Random rng;
                public quaternion* q1;
                public quaternion* q2;

                public void Init()
                {
                    rng = new Random(1);
                    q1 = (quaternion*)UnsafeUtility.Malloc(UnsafeUtility.SizeOf<quaternion>() * iterations, UnsafeUtility.AlignOf<quaternion>(), Allocator.Persistent);
                    for (int i = 0; i < iterations; ++i)
                    {
                        q1[i] = quaternion.identity;
                    }

                    q2 = (quaternion*)UnsafeUtility.Malloc(UnsafeUtility.SizeOf<quaternion>() * iterations, UnsafeUtility.AlignOf<quaternion>(), Allocator.Persistent);
                    for (int i = 0; i < iterations; ++i)
                    {
                        q2[i] = quaternion.identity;
                    }

                }

                public void Dispose()
                {
                    UnsafeUtility.Free(q1, Allocator.Persistent);
                    UnsafeUtility.Free(q2, Allocator.Persistent);
                }
            }

            public static void CommonTestFunction(ref Arguments args)
            {
                for (int i = 0; i < iterations; ++i)
                {
                    args.q2[i] = math.mul(args.q1[i], args.q2[i]);
                }
            }

            public static void MonoTestFunction(ref Arguments args)
            {
                CommonTestFunction(ref args);
            }

            [BurstCompile(CompileSynchronously = true)]
            public static void BurstTestFunction(ref Arguments args)
            {
                CommonTestFunction(ref args);
            }

            public delegate void TestFunction(ref Arguments args);
        }

        [Test, Performance]
        public void quaternion_quaternion_mono()
        {
            quaternion_quaternion.TestFunction testFunction = quaternion_quaternion.MonoTestFunction;
            var args = new quaternion_quaternion.Arguments();
            args.Init();

            var monoSampleGroup = new SampleGroup("Mono", SampleUnit.Microsecond);            Measure.Method(() =>
            {
                testFunction.Invoke(ref args);
            })
            .SampleGroup(monoSampleGroup)
            .WarmupCount(1)
            .MeasurementCount(10)
            .Run();
            args.Dispose();
        }

        [Test, Performance]
        public void quaternion_quaternion_burst()
        {
            FunctionPointer<quaternion_quaternion.TestFunction> testFunction = BurstCompiler.CompileFunctionPointer<quaternion_quaternion.TestFunction>(quaternion_quaternion.BurstTestFunction);
            var args = new quaternion_quaternion.Arguments();
            args.Init();

            var burstSampleGroup = new SampleGroup("Burst", SampleUnit.Microsecond);            Measure.Method(() =>
            {
                testFunction.Invoke(ref args);
            })
            .SampleGroup(burstSampleGroup)
            .WarmupCount(1)
            .MeasurementCount(10)
            .Run();
            args.Dispose();
        }
        [BurstCompile(CompileSynchronously = true)]
        public unsafe class float3x3_float3x3
        {
            public const int iterations = 10000;

            public struct Arguments : IDisposable
            {
                public Random rng;
                public float3x3* m1;
                public float3x3* m2;

                public void Init()
                {
                    rng = new Random(1);
                    m1 = (float3x3*)UnsafeUtility.Malloc(UnsafeUtility.SizeOf<float3x3>() * iterations, UnsafeUtility.AlignOf<float3x3>(), Allocator.Persistent);
                    for (int i = 0; i < iterations; ++i)
                    {
                        m1[i] = float3x3.identity;
                    }

                    m2 = (float3x3*)UnsafeUtility.Malloc(UnsafeUtility.SizeOf<float3x3>() * iterations, UnsafeUtility.AlignOf<float3x3>(), Allocator.Persistent);
                    for (int i = 0; i < iterations; ++i)
                    {
                        m2[i] = float3x3.identity;
                    }

                }

                public void Dispose()
                {
                    UnsafeUtility.Free(m1, Allocator.Persistent);
                    UnsafeUtility.Free(m2, Allocator.Persistent);
                }
            }

            public static void CommonTestFunction(ref Arguments args)
            {
                for (int i = 0; i < iterations; ++i)
                {
                    args.m2[i] = math.mul(args.m1[i], args.m2[i]);
                }
            }

            public static void MonoTestFunction(ref Arguments args)
            {
                CommonTestFunction(ref args);
            }

            [BurstCompile(CompileSynchronously = true)]
            public static void BurstTestFunction(ref Arguments args)
            {
                CommonTestFunction(ref args);
            }

            public delegate void TestFunction(ref Arguments args);
        }

        [Test, Performance]
        public void float3x3_float3x3_mono()
        {
            float3x3_float3x3.TestFunction testFunction = float3x3_float3x3.MonoTestFunction;
            var args = new float3x3_float3x3.Arguments();
            args.Init();

            var monoSampleGroup = new SampleGroup("Mono", SampleUnit.Microsecond);            Measure.Method(() =>
            {
                testFunction.Invoke(ref args);
            })
            .SampleGroup(monoSampleGroup)
            .WarmupCount(1)
            .MeasurementCount(10)
            .Run();
            args.Dispose();
        }

        [Test, Performance]
        public void float3x3_float3x3_burst()
        {
            FunctionPointer<float3x3_float3x3.TestFunction> testFunction = BurstCompiler.CompileFunctionPointer<float3x3_float3x3.TestFunction>(float3x3_float3x3.BurstTestFunction);
            var args = new float3x3_float3x3.Arguments();
            args.Init();

            var burstSampleGroup = new SampleGroup("Burst", SampleUnit.Microsecond);            Measure.Method(() =>
            {
                testFunction.Invoke(ref args);
            })
            .SampleGroup(burstSampleGroup)
            .WarmupCount(1)
            .MeasurementCount(10)
            .Run();
            args.Dispose();
        }
        [BurstCompile(CompileSynchronously = true)]
        public unsafe class float2x2_float2x2
        {
            public const int iterations = 10000;

            public struct Arguments : IDisposable
            {
                public Random rng;
                public float2x2* m1;
                public float2x2* m2;

                public void Init()
                {
                    rng = new Random(1);
                    m1 = (float2x2*)UnsafeUtility.Malloc(UnsafeUtility.SizeOf<float2x2>() * iterations, UnsafeUtility.AlignOf<float2x2>(), Allocator.Persistent);
                    for (int i = 0; i < iterations; ++i)
                    {
                        m1[i] = float2x2.identity;
                    }

                    m2 = (float2x2*)UnsafeUtility.Malloc(UnsafeUtility.SizeOf<float2x2>() * iterations, UnsafeUtility.AlignOf<float2x2>(), Allocator.Persistent);
                    for (int i = 0; i < iterations; ++i)
                    {
                        m2[i] = float2x2.identity;
                    }

                }

                public void Dispose()
                {
                    UnsafeUtility.Free(m1, Allocator.Persistent);
                    UnsafeUtility.Free(m2, Allocator.Persistent);
                }
            }

            public static void CommonTestFunction(ref Arguments args)
            {
                for (int i = 0; i < iterations; ++i)
                {
                    args.m2[i] = math.mul(args.m1[i], args.m2[i]);
                }
            }

            public static void MonoTestFunction(ref Arguments args)
            {
                CommonTestFunction(ref args);
            }

            [BurstCompile(CompileSynchronously = true)]
            public static void BurstTestFunction(ref Arguments args)
            {
                CommonTestFunction(ref args);
            }

            public delegate void TestFunction(ref Arguments args);
        }

        [Test, Performance]
        public void float2x2_float2x2_mono()
        {
            float2x2_float2x2.TestFunction testFunction = float2x2_float2x2.MonoTestFunction;
            var args = new float2x2_float2x2.Arguments();
            args.Init();

            var monoSampleGroup = new SampleGroup("Mono", SampleUnit.Microsecond);            Measure.Method(() =>
            {
                testFunction.Invoke(ref args);
            })
            .SampleGroup(monoSampleGroup)
            .WarmupCount(1)
            .MeasurementCount(10)
            .Run();
            args.Dispose();
        }

        [Test, Performance]
        public void float2x2_float2x2_burst()
        {
            FunctionPointer<float2x2_float2x2.TestFunction> testFunction = BurstCompiler.CompileFunctionPointer<float2x2_float2x2.TestFunction>(float2x2_float2x2.BurstTestFunction);
            var args = new float2x2_float2x2.Arguments();
            args.Init();

            var burstSampleGroup = new SampleGroup("Burst", SampleUnit.Microsecond);            Measure.Method(() =>
            {
                testFunction.Invoke(ref args);
            })
            .SampleGroup(burstSampleGroup)
            .WarmupCount(1)
            .MeasurementCount(10)
            .Run();
            args.Dispose();
        }
        [BurstCompile(CompileSynchronously = true)]
        public unsafe class float3x3_float3
        {
            public const int iterations = 10000;

            public struct Arguments : IDisposable
            {
                public Random rng;
                public float3x3* m1;
                public float3* m2;

                public void Init()
                {
                    rng = new Random(1);
                    m1 = (float3x3*)UnsafeUtility.Malloc(UnsafeUtility.SizeOf<float3x3>() * iterations, UnsafeUtility.AlignOf<float3x3>(), Allocator.Persistent);
                    for (int i = 0; i < iterations; ++i)
                    {
                        m1[i] = float3x3.identity;
                    }

                    m2 = (float3*)UnsafeUtility.Malloc(UnsafeUtility.SizeOf<float3>() * iterations, UnsafeUtility.AlignOf<float3>(), Allocator.Persistent);
                    for (int i = 0; i < iterations; ++i)
                    {
                        m2[i] = new float3(1.0f, 0.0f, 0.0f);
                    }

                }

                public void Dispose()
                {
                    UnsafeUtility.Free(m1, Allocator.Persistent);
                    UnsafeUtility.Free(m2, Allocator.Persistent);
                }
            }

            public static void CommonTestFunction(ref Arguments args)
            {
                for (int i = 0; i < iterations; ++i)
                {
                    args.m2[i] = math.mul(args.m1[i], args.m2[i]);
                }
            }

            public static void MonoTestFunction(ref Arguments args)
            {
                CommonTestFunction(ref args);
            }

            [BurstCompile(CompileSynchronously = true)]
            public static void BurstTestFunction(ref Arguments args)
            {
                CommonTestFunction(ref args);
            }

            public delegate void TestFunction(ref Arguments args);
        }

        [Test, Performance]
        public void float3x3_float3_mono()
        {
            float3x3_float3.TestFunction testFunction = float3x3_float3.MonoTestFunction;
            var args = new float3x3_float3.Arguments();
            args.Init();

            var monoSampleGroup = new SampleGroup("Mono", SampleUnit.Microsecond);            Measure.Method(() =>
            {
                testFunction.Invoke(ref args);
            })
            .SampleGroup(monoSampleGroup)
            .WarmupCount(1)
            .MeasurementCount(10)
            .Run();
            args.Dispose();
        }

        [Test, Performance]
        public void float3x3_float3_burst()
        {
            FunctionPointer<float3x3_float3.TestFunction> testFunction = BurstCompiler.CompileFunctionPointer<float3x3_float3.TestFunction>(float3x3_float3.BurstTestFunction);
            var args = new float3x3_float3.Arguments();
            args.Init();

            var burstSampleGroup = new SampleGroup("Burst", SampleUnit.Microsecond);            Measure.Method(() =>
            {
                testFunction.Invoke(ref args);
            })
            .SampleGroup(burstSampleGroup)
            .WarmupCount(1)
            .MeasurementCount(10)
            .Run();
            args.Dispose();
        }
        [BurstCompile(CompileSynchronously = true)]
        public unsafe class float2x2_float2
        {
            public const int iterations = 10000;

            public struct Arguments : IDisposable
            {
                public Random rng;
                public float2x2* m1;
                public float2* m2;

                public void Init()
                {
                    rng = new Random(1);
                    m1 = (float2x2*)UnsafeUtility.Malloc(UnsafeUtility.SizeOf<float2x2>() * iterations, UnsafeUtility.AlignOf<float2x2>(), Allocator.Persistent);
                    for (int i = 0; i < iterations; ++i)
                    {
                        m1[i] = float2x2.identity;
                    }

                    m2 = (float2*)UnsafeUtility.Malloc(UnsafeUtility.SizeOf<float2>() * iterations, UnsafeUtility.AlignOf<float2>(), Allocator.Persistent);
                    for (int i = 0; i < iterations; ++i)
                    {
                        m2[i] = new float2(1.0f, 0.0f);
                    }

                }

                public void Dispose()
                {
                    UnsafeUtility.Free(m1, Allocator.Persistent);
                    UnsafeUtility.Free(m2, Allocator.Persistent);
                }
            }

            public static void CommonTestFunction(ref Arguments args)
            {
                for (int i = 0; i < iterations; ++i)
                {
                    args.m2[i] = math.mul(args.m1[i], args.m2[i]);
                }
            }

            public static void MonoTestFunction(ref Arguments args)
            {
                CommonTestFunction(ref args);
            }

            [BurstCompile(CompileSynchronously = true)]
            public static void BurstTestFunction(ref Arguments args)
            {
                CommonTestFunction(ref args);
            }

            public delegate void TestFunction(ref Arguments args);
        }

        [Test, Performance]
        public void float2x2_float2_mono()
        {
            float2x2_float2.TestFunction testFunction = float2x2_float2.MonoTestFunction;
            var args = new float2x2_float2.Arguments();
            args.Init();

            var monoSampleGroup = new SampleGroup("Mono", SampleUnit.Microsecond);            Measure.Method(() =>
            {
                testFunction.Invoke(ref args);
            })
            .SampleGroup(monoSampleGroup)
            .WarmupCount(1)
            .MeasurementCount(10)
            .Run();
            args.Dispose();
        }

        [Test, Performance]
        public void float2x2_float2_burst()
        {
            FunctionPointer<float2x2_float2.TestFunction> testFunction = BurstCompiler.CompileFunctionPointer<float2x2_float2.TestFunction>(float2x2_float2.BurstTestFunction);
            var args = new float2x2_float2.Arguments();
            args.Init();

            var burstSampleGroup = new SampleGroup("Burst", SampleUnit.Microsecond);            Measure.Method(() =>
            {
                testFunction.Invoke(ref args);
            })
            .SampleGroup(burstSampleGroup)
            .WarmupCount(1)
            .MeasurementCount(10)
            .Run();
            args.Dispose();
        }
    }
}
