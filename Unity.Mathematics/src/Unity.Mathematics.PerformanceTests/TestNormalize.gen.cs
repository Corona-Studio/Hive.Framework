//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated. To update the generation of this file, modify and re-run Unity.Mathematics.CodeGen.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using NUnit.Framework;
using Unity.Collections;
using Unity.Collections.LowLevel.Unsafe;
using Unity.PerformanceTesting;
using Unity.Mathematics.Geometry;
using Unity.Burst;

namespace Unity.Mathematics.PerformanceTests
{
    partial class TestNormalize
    {
        [BurstCompile(CompileSynchronously = true)]
        public unsafe class float4_normalize
        {
            public const int iterations = 10000;

            public struct Arguments : IDisposable
            {
                public Random rng;
                public float4* v;

                public void Init()
                {
                    rng = new Random(1);
                    v = (float4*)UnsafeUtility.Malloc(UnsafeUtility.SizeOf<float4>() * iterations, UnsafeUtility.AlignOf<float4>(), Allocator.Persistent);
                    for (int i = 0; i < iterations; ++i)
                    {
                        v[i] = new float4(1.0f);
                    }

                }

                public void Dispose()
                {
                    UnsafeUtility.Free(v, Allocator.Persistent);
                }
            }

            public static void CommonTestFunction(ref Arguments args)
            {
                for (int i = 0; i < iterations; ++i)
                {
                    args.v[i] = math.normalize(args.v[i]);
                }
            }

            public static void MonoTestFunction(ref Arguments args)
            {
                CommonTestFunction(ref args);
            }

            [BurstCompile(CompileSynchronously = true)]
            public static void BurstTestFunction(ref Arguments args)
            {
                CommonTestFunction(ref args);
            }

            public delegate void TestFunction(ref Arguments args);
        }

        [Test, Performance]
        public void float4_normalize_mono()
        {
            float4_normalize.TestFunction testFunction = float4_normalize.MonoTestFunction;
            var args = new float4_normalize.Arguments();
            args.Init();

            var monoSampleGroup = new SampleGroup("Mono", SampleUnit.Microsecond);            Measure.Method(() =>
            {
                testFunction.Invoke(ref args);
            })
            .SampleGroup(monoSampleGroup)
            .WarmupCount(1)
            .MeasurementCount(10)
            .Run();
            args.Dispose();
        }

        [Test, Performance]
        public void float4_normalize_burst()
        {
            FunctionPointer<float4_normalize.TestFunction> testFunction = BurstCompiler.CompileFunctionPointer<float4_normalize.TestFunction>(float4_normalize.BurstTestFunction);
            var args = new float4_normalize.Arguments();
            args.Init();

            var burstSampleGroup = new SampleGroup("Burst", SampleUnit.Microsecond);            Measure.Method(() =>
            {
                testFunction.Invoke(ref args);
            })
            .SampleGroup(burstSampleGroup)
            .WarmupCount(1)
            .MeasurementCount(10)
            .Run();
            args.Dispose();
        }
        [BurstCompile(CompileSynchronously = true)]
        public unsafe class float3_normalize
        {
            public const int iterations = 10000;

            public struct Arguments : IDisposable
            {
                public Random rng;
                public float3* v;

                public void Init()
                {
                    rng = new Random(1);
                    v = (float3*)UnsafeUtility.Malloc(UnsafeUtility.SizeOf<float3>() * iterations, UnsafeUtility.AlignOf<float3>(), Allocator.Persistent);
                    for (int i = 0; i < iterations; ++i)
                    {
                        v[i] = new float3(1.0f);
                    }

                }

                public void Dispose()
                {
                    UnsafeUtility.Free(v, Allocator.Persistent);
                }
            }

            public static void CommonTestFunction(ref Arguments args)
            {
                for (int i = 0; i < iterations; ++i)
                {
                    args.v[i] = math.normalize(args.v[i]);
                }
            }

            public static void MonoTestFunction(ref Arguments args)
            {
                CommonTestFunction(ref args);
            }

            [BurstCompile(CompileSynchronously = true)]
            public static void BurstTestFunction(ref Arguments args)
            {
                CommonTestFunction(ref args);
            }

            public delegate void TestFunction(ref Arguments args);
        }

        [Test, Performance]
        public void float3_normalize_mono()
        {
            float3_normalize.TestFunction testFunction = float3_normalize.MonoTestFunction;
            var args = new float3_normalize.Arguments();
            args.Init();

            var monoSampleGroup = new SampleGroup("Mono", SampleUnit.Microsecond);            Measure.Method(() =>
            {
                testFunction.Invoke(ref args);
            })
            .SampleGroup(monoSampleGroup)
            .WarmupCount(1)
            .MeasurementCount(10)
            .Run();
            args.Dispose();
        }

        [Test, Performance]
        public void float3_normalize_burst()
        {
            FunctionPointer<float3_normalize.TestFunction> testFunction = BurstCompiler.CompileFunctionPointer<float3_normalize.TestFunction>(float3_normalize.BurstTestFunction);
            var args = new float3_normalize.Arguments();
            args.Init();

            var burstSampleGroup = new SampleGroup("Burst", SampleUnit.Microsecond);            Measure.Method(() =>
            {
                testFunction.Invoke(ref args);
            })
            .SampleGroup(burstSampleGroup)
            .WarmupCount(1)
            .MeasurementCount(10)
            .Run();
            args.Dispose();
        }
        [BurstCompile(CompileSynchronously = true)]
        public unsafe class float2_normalize
        {
            public const int iterations = 10000;

            public struct Arguments : IDisposable
            {
                public Random rng;
                public float2* v;

                public void Init()
                {
                    rng = new Random(1);
                    v = (float2*)UnsafeUtility.Malloc(UnsafeUtility.SizeOf<float2>() * iterations, UnsafeUtility.AlignOf<float2>(), Allocator.Persistent);
                    for (int i = 0; i < iterations; ++i)
                    {
                        v[i] = new float2(1.0f);
                    }

                }

                public void Dispose()
                {
                    UnsafeUtility.Free(v, Allocator.Persistent);
                }
            }

            public static void CommonTestFunction(ref Arguments args)
            {
                for (int i = 0; i < iterations; ++i)
                {
                    args.v[i] = math.normalize(args.v[i]);
                }
            }

            public static void MonoTestFunction(ref Arguments args)
            {
                CommonTestFunction(ref args);
            }

            [BurstCompile(CompileSynchronously = true)]
            public static void BurstTestFunction(ref Arguments args)
            {
                CommonTestFunction(ref args);
            }

            public delegate void TestFunction(ref Arguments args);
        }

        [Test, Performance]
        public void float2_normalize_mono()
        {
            float2_normalize.TestFunction testFunction = float2_normalize.MonoTestFunction;
            var args = new float2_normalize.Arguments();
            args.Init();

            var monoSampleGroup = new SampleGroup("Mono", SampleUnit.Microsecond);            Measure.Method(() =>
            {
                testFunction.Invoke(ref args);
            })
            .SampleGroup(monoSampleGroup)
            .WarmupCount(1)
            .MeasurementCount(10)
            .Run();
            args.Dispose();
        }

        [Test, Performance]
        public void float2_normalize_burst()
        {
            FunctionPointer<float2_normalize.TestFunction> testFunction = BurstCompiler.CompileFunctionPointer<float2_normalize.TestFunction>(float2_normalize.BurstTestFunction);
            var args = new float2_normalize.Arguments();
            args.Init();

            var burstSampleGroup = new SampleGroup("Burst", SampleUnit.Microsecond);            Measure.Method(() =>
            {
                testFunction.Invoke(ref args);
            })
            .SampleGroup(burstSampleGroup)
            .WarmupCount(1)
            .MeasurementCount(10)
            .Run();
            args.Dispose();
        }
        [BurstCompile(CompileSynchronously = true)]
        public unsafe class double4_normalize
        {
            public const int iterations = 10000;

            public struct Arguments : IDisposable
            {
                public Random rng;
                public double4* v;

                public void Init()
                {
                    rng = new Random(1);
                    v = (double4*)UnsafeUtility.Malloc(UnsafeUtility.SizeOf<double4>() * iterations, UnsafeUtility.AlignOf<double4>(), Allocator.Persistent);
                    for (int i = 0; i < iterations; ++i)
                    {
                        v[i] = new double4(1.0f);
                    }

                }

                public void Dispose()
                {
                    UnsafeUtility.Free(v, Allocator.Persistent);
                }
            }

            public static void CommonTestFunction(ref Arguments args)
            {
                for (int i = 0; i < iterations; ++i)
                {
                    args.v[i] = math.normalize(args.v[i]);
                }
            }

            public static void MonoTestFunction(ref Arguments args)
            {
                CommonTestFunction(ref args);
            }

            [BurstCompile(CompileSynchronously = true)]
            public static void BurstTestFunction(ref Arguments args)
            {
                CommonTestFunction(ref args);
            }

            public delegate void TestFunction(ref Arguments args);
        }

        [Test, Performance]
        public void double4_normalize_mono()
        {
            double4_normalize.TestFunction testFunction = double4_normalize.MonoTestFunction;
            var args = new double4_normalize.Arguments();
            args.Init();

            var monoSampleGroup = new SampleGroup("Mono", SampleUnit.Microsecond);            Measure.Method(() =>
            {
                testFunction.Invoke(ref args);
            })
            .SampleGroup(monoSampleGroup)
            .WarmupCount(1)
            .MeasurementCount(10)
            .Run();
            args.Dispose();
        }

        [Test, Performance]
        public void double4_normalize_burst()
        {
            FunctionPointer<double4_normalize.TestFunction> testFunction = BurstCompiler.CompileFunctionPointer<double4_normalize.TestFunction>(double4_normalize.BurstTestFunction);
            var args = new double4_normalize.Arguments();
            args.Init();

            var burstSampleGroup = new SampleGroup("Burst", SampleUnit.Microsecond);            Measure.Method(() =>
            {
                testFunction.Invoke(ref args);
            })
            .SampleGroup(burstSampleGroup)
            .WarmupCount(1)
            .MeasurementCount(10)
            .Run();
            args.Dispose();
        }
        [BurstCompile(CompileSynchronously = true)]
        public unsafe class double3_normalize
        {
            public const int iterations = 10000;

            public struct Arguments : IDisposable
            {
                public Random rng;
                public double3* v;

                public void Init()
                {
                    rng = new Random(1);
                    v = (double3*)UnsafeUtility.Malloc(UnsafeUtility.SizeOf<double3>() * iterations, UnsafeUtility.AlignOf<double3>(), Allocator.Persistent);
                    for (int i = 0; i < iterations; ++i)
                    {
                        v[i] = new double3(1.0f);
                    }

                }

                public void Dispose()
                {
                    UnsafeUtility.Free(v, Allocator.Persistent);
                }
            }

            public static void CommonTestFunction(ref Arguments args)
            {
                for (int i = 0; i < iterations; ++i)
                {
                    args.v[i] = math.normalize(args.v[i]);
                }
            }

            public static void MonoTestFunction(ref Arguments args)
            {
                CommonTestFunction(ref args);
            }

            [BurstCompile(CompileSynchronously = true)]
            public static void BurstTestFunction(ref Arguments args)
            {
                CommonTestFunction(ref args);
            }

            public delegate void TestFunction(ref Arguments args);
        }

        [Test, Performance]
        public void double3_normalize_mono()
        {
            double3_normalize.TestFunction testFunction = double3_normalize.MonoTestFunction;
            var args = new double3_normalize.Arguments();
            args.Init();

            var monoSampleGroup = new SampleGroup("Mono", SampleUnit.Microsecond);            Measure.Method(() =>
            {
                testFunction.Invoke(ref args);
            })
            .SampleGroup(monoSampleGroup)
            .WarmupCount(1)
            .MeasurementCount(10)
            .Run();
            args.Dispose();
        }

        [Test, Performance]
        public void double3_normalize_burst()
        {
            FunctionPointer<double3_normalize.TestFunction> testFunction = BurstCompiler.CompileFunctionPointer<double3_normalize.TestFunction>(double3_normalize.BurstTestFunction);
            var args = new double3_normalize.Arguments();
            args.Init();

            var burstSampleGroup = new SampleGroup("Burst", SampleUnit.Microsecond);            Measure.Method(() =>
            {
                testFunction.Invoke(ref args);
            })
            .SampleGroup(burstSampleGroup)
            .WarmupCount(1)
            .MeasurementCount(10)
            .Run();
            args.Dispose();
        }
        [BurstCompile(CompileSynchronously = true)]
        public unsafe class double2_normalize
        {
            public const int iterations = 10000;

            public struct Arguments : IDisposable
            {
                public Random rng;
                public double2* v;

                public void Init()
                {
                    rng = new Random(1);
                    v = (double2*)UnsafeUtility.Malloc(UnsafeUtility.SizeOf<double2>() * iterations, UnsafeUtility.AlignOf<double2>(), Allocator.Persistent);
                    for (int i = 0; i < iterations; ++i)
                    {
                        v[i] = new double2(1.0f);
                    }

                }

                public void Dispose()
                {
                    UnsafeUtility.Free(v, Allocator.Persistent);
                }
            }

            public static void CommonTestFunction(ref Arguments args)
            {
                for (int i = 0; i < iterations; ++i)
                {
                    args.v[i] = math.normalize(args.v[i]);
                }
            }

            public static void MonoTestFunction(ref Arguments args)
            {
                CommonTestFunction(ref args);
            }

            [BurstCompile(CompileSynchronously = true)]
            public static void BurstTestFunction(ref Arguments args)
            {
                CommonTestFunction(ref args);
            }

            public delegate void TestFunction(ref Arguments args);
        }

        [Test, Performance]
        public void double2_normalize_mono()
        {
            double2_normalize.TestFunction testFunction = double2_normalize.MonoTestFunction;
            var args = new double2_normalize.Arguments();
            args.Init();

            var monoSampleGroup = new SampleGroup("Mono", SampleUnit.Microsecond);            Measure.Method(() =>
            {
                testFunction.Invoke(ref args);
            })
            .SampleGroup(monoSampleGroup)
            .WarmupCount(1)
            .MeasurementCount(10)
            .Run();
            args.Dispose();
        }

        [Test, Performance]
        public void double2_normalize_burst()
        {
            FunctionPointer<double2_normalize.TestFunction> testFunction = BurstCompiler.CompileFunctionPointer<double2_normalize.TestFunction>(double2_normalize.BurstTestFunction);
            var args = new double2_normalize.Arguments();
            args.Init();

            var burstSampleGroup = new SampleGroup("Burst", SampleUnit.Microsecond);            Measure.Method(() =>
            {
                testFunction.Invoke(ref args);
            })
            .SampleGroup(burstSampleGroup)
            .WarmupCount(1)
            .MeasurementCount(10)
            .Run();
            args.Dispose();
        }
        [BurstCompile(CompileSynchronously = true)]
        public unsafe class float4_normalizesafe
        {
            public const int iterations = 10000;

            public struct Arguments : IDisposable
            {
                public Random rng;
                public float4* v;

                public void Init()
                {
                    rng = new Random(1);
                    v = (float4*)UnsafeUtility.Malloc(UnsafeUtility.SizeOf<float4>() * iterations, UnsafeUtility.AlignOf<float4>(), Allocator.Persistent);
                    for (int i = 0; i < iterations; ++i)
                    {
                        v[i] = new float4(1.0f);
                    }

                }

                public void Dispose()
                {
                    UnsafeUtility.Free(v, Allocator.Persistent);
                }
            }

            public static void CommonTestFunction(ref Arguments args)
            {
                for (int i = 0; i < iterations; ++i)
                {
                    args.v[i] = math.normalizesafe(args.v[i]);
                }
            }

            public static void MonoTestFunction(ref Arguments args)
            {
                CommonTestFunction(ref args);
            }

            [BurstCompile(CompileSynchronously = true)]
            public static void BurstTestFunction(ref Arguments args)
            {
                CommonTestFunction(ref args);
            }

            public delegate void TestFunction(ref Arguments args);
        }

        [Test, Performance]
        public void float4_normalizesafe_mono()
        {
            float4_normalizesafe.TestFunction testFunction = float4_normalizesafe.MonoTestFunction;
            var args = new float4_normalizesafe.Arguments();
            args.Init();

            var monoSampleGroup = new SampleGroup("Mono", SampleUnit.Microsecond);            Measure.Method(() =>
            {
                testFunction.Invoke(ref args);
            })
            .SampleGroup(monoSampleGroup)
            .WarmupCount(1)
            .MeasurementCount(10)
            .Run();
            args.Dispose();
        }

        [Test, Performance]
        public void float4_normalizesafe_burst()
        {
            FunctionPointer<float4_normalizesafe.TestFunction> testFunction = BurstCompiler.CompileFunctionPointer<float4_normalizesafe.TestFunction>(float4_normalizesafe.BurstTestFunction);
            var args = new float4_normalizesafe.Arguments();
            args.Init();

            var burstSampleGroup = new SampleGroup("Burst", SampleUnit.Microsecond);            Measure.Method(() =>
            {
                testFunction.Invoke(ref args);
            })
            .SampleGroup(burstSampleGroup)
            .WarmupCount(1)
            .MeasurementCount(10)
            .Run();
            args.Dispose();
        }
        [BurstCompile(CompileSynchronously = true)]
        public unsafe class float3_normalizesafe
        {
            public const int iterations = 10000;

            public struct Arguments : IDisposable
            {
                public Random rng;
                public float3* v;

                public void Init()
                {
                    rng = new Random(1);
                    v = (float3*)UnsafeUtility.Malloc(UnsafeUtility.SizeOf<float3>() * iterations, UnsafeUtility.AlignOf<float3>(), Allocator.Persistent);
                    for (int i = 0; i < iterations; ++i)
                    {
                        v[i] = new float3(1.0f);
                    }

                }

                public void Dispose()
                {
                    UnsafeUtility.Free(v, Allocator.Persistent);
                }
            }

            public static void CommonTestFunction(ref Arguments args)
            {
                for (int i = 0; i < iterations; ++i)
                {
                    args.v[i] = math.normalizesafe(args.v[i]);
                }
            }

            public static void MonoTestFunction(ref Arguments args)
            {
                CommonTestFunction(ref args);
            }

            [BurstCompile(CompileSynchronously = true)]
            public static void BurstTestFunction(ref Arguments args)
            {
                CommonTestFunction(ref args);
            }

            public delegate void TestFunction(ref Arguments args);
        }

        [Test, Performance]
        public void float3_normalizesafe_mono()
        {
            float3_normalizesafe.TestFunction testFunction = float3_normalizesafe.MonoTestFunction;
            var args = new float3_normalizesafe.Arguments();
            args.Init();

            var monoSampleGroup = new SampleGroup("Mono", SampleUnit.Microsecond);            Measure.Method(() =>
            {
                testFunction.Invoke(ref args);
            })
            .SampleGroup(monoSampleGroup)
            .WarmupCount(1)
            .MeasurementCount(10)
            .Run();
            args.Dispose();
        }

        [Test, Performance]
        public void float3_normalizesafe_burst()
        {
            FunctionPointer<float3_normalizesafe.TestFunction> testFunction = BurstCompiler.CompileFunctionPointer<float3_normalizesafe.TestFunction>(float3_normalizesafe.BurstTestFunction);
            var args = new float3_normalizesafe.Arguments();
            args.Init();

            var burstSampleGroup = new SampleGroup("Burst", SampleUnit.Microsecond);            Measure.Method(() =>
            {
                testFunction.Invoke(ref args);
            })
            .SampleGroup(burstSampleGroup)
            .WarmupCount(1)
            .MeasurementCount(10)
            .Run();
            args.Dispose();
        }
        [BurstCompile(CompileSynchronously = true)]
        public unsafe class float2_normalizesafe
        {
            public const int iterations = 10000;

            public struct Arguments : IDisposable
            {
                public Random rng;
                public float2* v;

                public void Init()
                {
                    rng = new Random(1);
                    v = (float2*)UnsafeUtility.Malloc(UnsafeUtility.SizeOf<float2>() * iterations, UnsafeUtility.AlignOf<float2>(), Allocator.Persistent);
                    for (int i = 0; i < iterations; ++i)
                    {
                        v[i] = new float2(1.0f);
                    }

                }

                public void Dispose()
                {
                    UnsafeUtility.Free(v, Allocator.Persistent);
                }
            }

            public static void CommonTestFunction(ref Arguments args)
            {
                for (int i = 0; i < iterations; ++i)
                {
                    args.v[i] = math.normalizesafe(args.v[i]);
                }
            }

            public static void MonoTestFunction(ref Arguments args)
            {
                CommonTestFunction(ref args);
            }

            [BurstCompile(CompileSynchronously = true)]
            public static void BurstTestFunction(ref Arguments args)
            {
                CommonTestFunction(ref args);
            }

            public delegate void TestFunction(ref Arguments args);
        }

        [Test, Performance]
        public void float2_normalizesafe_mono()
        {
            float2_normalizesafe.TestFunction testFunction = float2_normalizesafe.MonoTestFunction;
            var args = new float2_normalizesafe.Arguments();
            args.Init();

            var monoSampleGroup = new SampleGroup("Mono", SampleUnit.Microsecond);            Measure.Method(() =>
            {
                testFunction.Invoke(ref args);
            })
            .SampleGroup(monoSampleGroup)
            .WarmupCount(1)
            .MeasurementCount(10)
            .Run();
            args.Dispose();
        }

        [Test, Performance]
        public void float2_normalizesafe_burst()
        {
            FunctionPointer<float2_normalizesafe.TestFunction> testFunction = BurstCompiler.CompileFunctionPointer<float2_normalizesafe.TestFunction>(float2_normalizesafe.BurstTestFunction);
            var args = new float2_normalizesafe.Arguments();
            args.Init();

            var burstSampleGroup = new SampleGroup("Burst", SampleUnit.Microsecond);            Measure.Method(() =>
            {
                testFunction.Invoke(ref args);
            })
            .SampleGroup(burstSampleGroup)
            .WarmupCount(1)
            .MeasurementCount(10)
            .Run();
            args.Dispose();
        }
        [BurstCompile(CompileSynchronously = true)]
        public unsafe class double4_normalizesafe
        {
            public const int iterations = 10000;

            public struct Arguments : IDisposable
            {
                public Random rng;
                public double4* v;

                public void Init()
                {
                    rng = new Random(1);
                    v = (double4*)UnsafeUtility.Malloc(UnsafeUtility.SizeOf<double4>() * iterations, UnsafeUtility.AlignOf<double4>(), Allocator.Persistent);
                    for (int i = 0; i < iterations; ++i)
                    {
                        v[i] = new double4(1.0f);
                    }

                }

                public void Dispose()
                {
                    UnsafeUtility.Free(v, Allocator.Persistent);
                }
            }

            public static void CommonTestFunction(ref Arguments args)
            {
                for (int i = 0; i < iterations; ++i)
                {
                    args.v[i] = math.normalizesafe(args.v[i]);
                }
            }

            public static void MonoTestFunction(ref Arguments args)
            {
                CommonTestFunction(ref args);
            }

            [BurstCompile(CompileSynchronously = true)]
            public static void BurstTestFunction(ref Arguments args)
            {
                CommonTestFunction(ref args);
            }

            public delegate void TestFunction(ref Arguments args);
        }

        [Test, Performance]
        public void double4_normalizesafe_mono()
        {
            double4_normalizesafe.TestFunction testFunction = double4_normalizesafe.MonoTestFunction;
            var args = new double4_normalizesafe.Arguments();
            args.Init();

            var monoSampleGroup = new SampleGroup("Mono", SampleUnit.Microsecond);            Measure.Method(() =>
            {
                testFunction.Invoke(ref args);
            })
            .SampleGroup(monoSampleGroup)
            .WarmupCount(1)
            .MeasurementCount(10)
            .Run();
            args.Dispose();
        }

        [Test, Performance]
        public void double4_normalizesafe_burst()
        {
            FunctionPointer<double4_normalizesafe.TestFunction> testFunction = BurstCompiler.CompileFunctionPointer<double4_normalizesafe.TestFunction>(double4_normalizesafe.BurstTestFunction);
            var args = new double4_normalizesafe.Arguments();
            args.Init();

            var burstSampleGroup = new SampleGroup("Burst", SampleUnit.Microsecond);            Measure.Method(() =>
            {
                testFunction.Invoke(ref args);
            })
            .SampleGroup(burstSampleGroup)
            .WarmupCount(1)
            .MeasurementCount(10)
            .Run();
            args.Dispose();
        }
        [BurstCompile(CompileSynchronously = true)]
        public unsafe class double3_normalizesafe
        {
            public const int iterations = 10000;

            public struct Arguments : IDisposable
            {
                public Random rng;
                public double3* v;

                public void Init()
                {
                    rng = new Random(1);
                    v = (double3*)UnsafeUtility.Malloc(UnsafeUtility.SizeOf<double3>() * iterations, UnsafeUtility.AlignOf<double3>(), Allocator.Persistent);
                    for (int i = 0; i < iterations; ++i)
                    {
                        v[i] = new double3(1.0f);
                    }

                }

                public void Dispose()
                {
                    UnsafeUtility.Free(v, Allocator.Persistent);
                }
            }

            public static void CommonTestFunction(ref Arguments args)
            {
                for (int i = 0; i < iterations; ++i)
                {
                    args.v[i] = math.normalizesafe(args.v[i]);
                }
            }

            public static void MonoTestFunction(ref Arguments args)
            {
                CommonTestFunction(ref args);
            }

            [BurstCompile(CompileSynchronously = true)]
            public static void BurstTestFunction(ref Arguments args)
            {
                CommonTestFunction(ref args);
            }

            public delegate void TestFunction(ref Arguments args);
        }

        [Test, Performance]
        public void double3_normalizesafe_mono()
        {
            double3_normalizesafe.TestFunction testFunction = double3_normalizesafe.MonoTestFunction;
            var args = new double3_normalizesafe.Arguments();
            args.Init();

            var monoSampleGroup = new SampleGroup("Mono", SampleUnit.Microsecond);            Measure.Method(() =>
            {
                testFunction.Invoke(ref args);
            })
            .SampleGroup(monoSampleGroup)
            .WarmupCount(1)
            .MeasurementCount(10)
            .Run();
            args.Dispose();
        }

        [Test, Performance]
        public void double3_normalizesafe_burst()
        {
            FunctionPointer<double3_normalizesafe.TestFunction> testFunction = BurstCompiler.CompileFunctionPointer<double3_normalizesafe.TestFunction>(double3_normalizesafe.BurstTestFunction);
            var args = new double3_normalizesafe.Arguments();
            args.Init();

            var burstSampleGroup = new SampleGroup("Burst", SampleUnit.Microsecond);            Measure.Method(() =>
            {
                testFunction.Invoke(ref args);
            })
            .SampleGroup(burstSampleGroup)
            .WarmupCount(1)
            .MeasurementCount(10)
            .Run();
            args.Dispose();
        }
        [BurstCompile(CompileSynchronously = true)]
        public unsafe class double2_normalizesafe
        {
            public const int iterations = 10000;

            public struct Arguments : IDisposable
            {
                public Random rng;
                public double2* v;

                public void Init()
                {
                    rng = new Random(1);
                    v = (double2*)UnsafeUtility.Malloc(UnsafeUtility.SizeOf<double2>() * iterations, UnsafeUtility.AlignOf<double2>(), Allocator.Persistent);
                    for (int i = 0; i < iterations; ++i)
                    {
                        v[i] = new double2(1.0f);
                    }

                }

                public void Dispose()
                {
                    UnsafeUtility.Free(v, Allocator.Persistent);
                }
            }

            public static void CommonTestFunction(ref Arguments args)
            {
                for (int i = 0; i < iterations; ++i)
                {
                    args.v[i] = math.normalizesafe(args.v[i]);
                }
            }

            public static void MonoTestFunction(ref Arguments args)
            {
                CommonTestFunction(ref args);
            }

            [BurstCompile(CompileSynchronously = true)]
            public static void BurstTestFunction(ref Arguments args)
            {
                CommonTestFunction(ref args);
            }

            public delegate void TestFunction(ref Arguments args);
        }

        [Test, Performance]
        public void double2_normalizesafe_mono()
        {
            double2_normalizesafe.TestFunction testFunction = double2_normalizesafe.MonoTestFunction;
            var args = new double2_normalizesafe.Arguments();
            args.Init();

            var monoSampleGroup = new SampleGroup("Mono", SampleUnit.Microsecond);            Measure.Method(() =>
            {
                testFunction.Invoke(ref args);
            })
            .SampleGroup(monoSampleGroup)
            .WarmupCount(1)
            .MeasurementCount(10)
            .Run();
            args.Dispose();
        }

        [Test, Performance]
        public void double2_normalizesafe_burst()
        {
            FunctionPointer<double2_normalizesafe.TestFunction> testFunction = BurstCompiler.CompileFunctionPointer<double2_normalizesafe.TestFunction>(double2_normalizesafe.BurstTestFunction);
            var args = new double2_normalizesafe.Arguments();
            args.Init();

            var burstSampleGroup = new SampleGroup("Burst", SampleUnit.Microsecond);            Measure.Method(() =>
            {
                testFunction.Invoke(ref args);
            })
            .SampleGroup(burstSampleGroup)
            .WarmupCount(1)
            .MeasurementCount(10)
            .Run();
            args.Dispose();
        }
    }
}
