using System.Reflection;

namespace Hive.Server.Common.Application;


public class ChannelHandlerBinderAttribute : Attribute
{
    public ChannelHandlerBinderAttribute(Type type)
    {
        Type = type;
    }

    public Type Type { get; }
}
public class ChannelHandlerBinderProvider
{
    private static readonly Dictionary<Type,IChannelHandlerBinder> BinderCache;
    static ChannelHandlerBinderProvider()
    {
        BinderCache = new Dictionary<Type, IChannelHandlerBinder>();
        var assemblies = AppDomain.CurrentDomain.GetAssemblies();
        foreach (var assembly in assemblies)
        {
            foreach (var type in assembly.GetTypes())
            {
                var attribute = type.GetCustomAttribute<ChannelHandlerBinderAttribute>();
                if (attribute != null)
                {
                    if (Activator.CreateInstance(type) is IChannelHandlerBinder binder)
                    {
                        BinderCache.Add(attribute.Type,binder);
                    }
                }
            }
        }
    }
    public static IChannelHandlerBinder GetHandlerBinder(Type type)
    {
        lock (BinderCache)
        {
            if (BinderCache.TryGetValue(type, out var binder))
            {
                return binder;
            }
            throw new InvalidOperationException($"No binder found for type {type}, It should be generated by code generator.");
        }
    }
}